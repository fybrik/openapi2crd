// Copyright 2021 IBM Corp.
// SPDX-License-Identifier: Apache-2.0

package exporter

import (
	"bufio"
	"encoding/json"
	"os"
	"path/filepath"

	"github.com/ghodss/yaml"
	"github.com/pkg/errors"
	apiextensions "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions"
	apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
)

// Exporter exports the yaml config to file.
type Exporter struct {
	writer *bufio.Writer
}

func New(outputFilepath string) (*Exporter, error) {
	f, err := os.Create(filepath.Clean(outputFilepath))
	if err != nil {
		return nil, errors.Wrapf(err, "Failed to open the output file %s", outputFilepath)
	}

	writer := bufio.NewWriter(f)
	_, err = writer.WriteString("# The file is generated by openapi2crd\n")
	if err != nil {
		return nil, errors.Wrapf(err, "Failed to write to output file")
	}

	return &Exporter{
		writer: writer,
	}, nil
}

// Export exports the yaml config to file.
func (e *Exporter) Export(final *apiextensions.CustomResourceDefinition) error {
	err := e.marshallCrd(final)
	if err != nil {
		return errors.Wrapf(err, "Failed to marshall CRD when writing output")
	}

	_ = e.writer.Flush()

	return nil
}

func (e Exporter) marshallCrd(crd *apiextensions.CustomResourceDefinition) error {

	obj, err := convert(crd)
	if err != nil {
		return err
	}
	obj.Kind = "CustomResourceDefinition"
	obj.APIVersion = "apiextensions.k8s.io/v1"

	// TODO: this marshals the status field although it's empty
	jsonBytes, err := json.MarshalIndent(obj, "", "    ")
	if err != nil {
		return err
	}

	yamlBytes, err := yaml.JSONToYAML(jsonBytes)
	if err != nil {
		return err
	}
	_, err = e.writer.WriteString("---\n")
	if err != nil {
		return err
	}
	_, err = e.writer.Write(yamlBytes)
	if err != nil {
		return err
	}

	return nil
}

func convert(crd *apiextensions.CustomResourceDefinition) (*apiextensionsv1.CustomResourceDefinition, error) {
	sch := runtime.NewScheme()
	_ = scheme.AddToScheme(sch)
	_ = apiextensions.AddToScheme(sch)
	_ = apiextensionsv1.AddToScheme(sch)
	_ = apiextensionsv1.RegisterConversions(sch)
	out := &apiextensionsv1.CustomResourceDefinition{}
	err := sch.Convert(crd, out, nil)
	if err != nil {
		return nil, err
	}
	return out, err
}
